// This is an autogenerated file from Firebase Studio.
import { db } from '@/lib/firebase';
import type { FoodItem } from '@/lib/types';
import { collection, getDocs, doc, setDoc, getDoc } from 'firebase/firestore';

function getFoodCollection(userId: string) {
    if (!userId) throw new Error("User ID is required.");
    return collection(db, 'users', userId, 'foods');
}

// A "once" client-side fetch of all foods for a specific user.
export async function getFoods(userId: string): Promise<FoodItem[]> {
    const foodCollection = getFoodCollection(userId);
    const userDocRef = doc(db, 'users', userId);
    const userDocSnap = await getDoc(userDocRef);

    // If the user document doesn't exist, it means it's a new user.
    // Populate initial data for them.
    if (!userDocSnap.exists()) {
        await setDoc(userDocRef, { initialized: true }); // Mark user as initialized
        return populateInitialFoods(userId);
    }
    
    const snapshot = await getDocs(foodCollection);
    const foods = snapshot.docs.map(doc => {
        const data = doc.data();
        return {
            id: doc.id,
            name: data.name || 'Unnamed Food',
            calories: data.calories || 0,
            protein: data.protein || 0,
            carbs: data.carbs || 0,
            fats: data.fats || 0,
            servingSize: data.servingSize || 1,
            servingUnit: data.servingUnit || 'unit',
        } as FoodItem;
    });
    
    return foods;
}

// Function to populate the 'foods' collection with initial data for a specific user
async function populateInitialFoods(userId: string): Promise<FoodItem[]> {
    const initialFoods: Omit<FoodItem, 'id'>[] = [
      { name: 'Apple', calories: 95, protein: 0.5, carbs: 25, fats: 0.3, servingSize: 1, servingUnit: 'medium' },
      { name: 'Banana', calories: 105, protein: 1.3, carbs: 27, fats: 0.4, servingSize: 1, servingUnit: 'medium' },
      { name: 'Chicken Breast', calories: 165, protein: 31, carbs: 0, fats: 3.6, servingSize: 100, servingUnit: 'g' },
      { name: 'Brown Rice', calories: 111, protein: 2.6, carbs: 23, fats: 0.9, servingSize: 100, servingUnit: 'g cooked' },
      { name: 'Whole Egg', calories: 78, protein: 6, carbs: 0.6, fats: 5, servingSize: 1, servingUnit: 'large' },
      { name: 'Almonds', calories: 579, protein: 21, carbs: 22, fats: 49, servingSize: 100, servingUnit: 'g' },
      { name: 'Greek Yogurt', calories: 59, protein: 10, carbs: 3.6, fats: 0.4, servingSize: 100, servingUnit: 'g' },
      { name: 'Salmon', calories: 208, protein: 20, carbs: 0, fats: 13, servingSize: 100, servingUnit: 'g' },
      { name: 'Broccoli', calories: 55, protein: 3.7, carbs: 11, fats: 0.6, servingSize: 1, servingUnit: 'cup' },
      { name: 'Olive Oil', calories: 884, protein: 0, carbs: 0, fats: 100, servingSize: 100, servingUnit: 'g' },
      { name: 'Oats', calories: 389, protein: 16.9, carbs: 66.3, fats: 6.9, servingSize: 100, servingUnit: 'g' },
      { name: 'Protein Powder', calories: 393, protein: 80, carbs: 8, fats: 4, servingSize: 100, servingUnit: 'g' },
    ];

    const foodCollection = getFoodCollection(userId);
    const addedFoods: FoodItem[] = [];
    for (const food of initialFoods) {
        const docId = food.name.toLowerCase().replace(/\s+/g, '-');
        const docRef = doc(foodCollection, docId);
        await setDoc(docRef, food);
        addedFoods.push({ id: docId, ...food });
    }
    return addedFoods;
}
