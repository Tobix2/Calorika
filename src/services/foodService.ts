// This is an autogenerated file from Firebase Studio.
'use server';
import { db } from '@/lib/firebase';
import type { FoodItem } from '@/lib/types';
import { collection, getDocs, addDoc, doc, setDoc } from 'firebase/firestore';

const foodCollection = collection(db, 'foods');

// A "once" server-side fetch of all foods.
// This is not a realtime listener.
export async function getFoods(): Promise<FoodItem[]> {
    const snapshot = await getDocs(foodCollection);
    const foods = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as FoodItem));
    
    // If the collection is empty, populate with initial data
    if (foods.length === 0) {
        return populateInitialFoods();
    }
    
    return foods;
}

export async function addFood(food: Omit<FoodItem, 'id'>): Promise<FoodItem> {
    try {
        const cleanFood = JSON.parse(JSON.stringify(food));
        const docRef = await addDoc(foodCollection, cleanFood);
        return { id: docRef.id, ...cleanFood };
    } catch (error) {
        console.error("Error adding document to Firestore: ", error);
        if (error instanceof Error) {
            throw new Error(`Firestore error: ${error.message}`);
        }
        throw new Error('An unknown error occurred while saving to Firestore.');
    }
}

// Function to populate the 'foods' collection with initial data
async function populateInitialFoods(): Promise<FoodItem[]> {
    const initialFoods: Omit<FoodItem, 'id'>[] = [
      { name: 'Apple', calories: 95, protein: 0.5, carbs: 25, fats: 0.3, servingSize: 1, servingUnit: 'medium' },
      { name: 'Banana', calories: 105, protein: 1.3, carbs: 27, fats: 0.4, servingSize: 1, servingUnit: 'medium' },
      { name: 'Chicken Breast', calories: 165, protein: 31, carbs: 0, fats: 3.6, servingSize: 100, servingUnit: 'g' },
      { name: 'Brown Rice', calories: 111, protein: 2.6, carbs: 23, fats: 0.9, servingSize: 100, servingUnit: 'g cooked' },
      { name: 'Whole Egg', calories: 78, protein: 6, carbs: 0.6, fats: 5, servingSize: 1, servingUnit: 'large' },
      { name: 'Almonds', calories: 579, protein: 21, carbs: 22, fats: 49, servingSize: 100, servingUnit: 'g' },
      { name: 'Greek Yogurt', calories: 59, protein: 10, carbs: 3.6, fats: 0.4, servingSize: 100, servingUnit: 'g' },
      { name: 'Salmon', calories: 208, protein: 20, carbs: 0, fats: 13, servingSize: 100, servingUnit: 'g' },
      { name: 'Broccoli', calories: 55, protein: 3.7, carbs: 11, fats: 0.6, servingSize: 1, servingUnit: 'cup' },
      { name: 'Olive Oil', calories: 884, protein: 0, carbs: 0, fats: 100, servingSize: 100, servingUnit: 'g' },
      { name: 'Oats', calories: 389, protein: 16.9, carbs: 66.3, fats: 6.9, servingSize: 100, servingUnit: 'g' },
      { name: 'Protein Powder', calories: 393, protein: 80, carbs: 8, fats: 4, servingSize: 100, servingUnit: 'g' },
    ];

    const addedFoods: FoodItem[] = [];
    for (const food of initialFoods) {
        // Use a predefined ID based on the name to avoid duplicates on re-runs
        const docId = food.name.toLowerCase().replace(/\s+/g, '-');
        const docRef = doc(db, 'foods', docId);
        await setDoc(docRef, food);
        addedFoods.push({ id: docId, ...food });
    }
    return addedFoods;
}
