// This is an autogenerated file from Firebase Studio.
import { db } from '@/lib/firebase';
import type { CustomMeal } from '@/lib/types';
import { collection, getDocs, addDoc, doc, deleteDoc } from 'firebase/firestore';

function getMealCollection(userId: string) {
    if (!userId) throw new Error("User ID is required.");
    return collection(db, 'users', userId, 'customMeals');
}


export async function getCustomMeals(userId: string): Promise<CustomMeal[]> {
    const mealCollection = getMealCollection(userId);
    const snapshot = await getDocs(mealCollection);
    return snapshot.docs.map(doc => {
        const data = doc.data();

        // Asegurar valores por defecto para campos opcionales para prevenir problemas de serialización.
        const meal: CustomMeal = {
            id: doc.id,
            name: data.name,
            items: data.items || [],
            totalCalories: data.totalCalories ?? data.calories ?? 0,
            totalProtein: data.totalProtein ?? data.protein ?? 0,
            totalCarbs: data.totalCarbs ?? data.carbs ?? 0,
            totalFats: data.totalFats ?? data.fats ?? 0,
            servingSize: data.servingSize || 1,
            servingUnit: data.servingUnit || 'serving',
        };
        return meal;
    });
}

export async function addCustomMeal(userId: string, meal: Omit<CustomMeal, 'id'>): Promise<CustomMeal> {
    const mealCollection = getMealCollection(userId);
    try {
        // Limpiar el objeto para asegurar que sea compatible con Firestore
        const cleanMeal = JSON.parse(JSON.stringify(meal));
        const docRef = await addDoc(mealCollection, cleanMeal);
        return { id: docRef.id, ...cleanMeal };
    } catch (error) {
        console.error("Error adding document to Firestore: ", error);
        // Re-lanzar el error para ser capturado por la función llamante
        if (error instanceof Error) {
            throw new Error(`Firestore error: ${error.message}`);
        }
        throw new Error('An unknown error occurred while saving to Firestore.');
    }
}

export async function deleteCustomMeal(userId: string, mealId: string): Promise<void> {
    if (!mealId) throw new Error("Meal ID is required.");
    console.log(`[Server Action] Intentando borrar el CustomMeal con ID: ${mealId} para el usuario ${userId}`);
    const mealDocRef = doc(db, 'users', userId, 'customMeals', mealId);
    try {
        await deleteDoc(mealDocRef);
        console.log(`[Server Action] CustomMeal con ID: ${mealId} borrado exitosamente.`);
    } catch (error) {
        console.error("Error deleting document from Firestore: ", error);
        if (error instanceof Error) {
            throw new Error(`Firestore error: ${error.message}`);
        }
        throw new Error('An unknown error occurred while deleting from Firestore.');
    }
}
