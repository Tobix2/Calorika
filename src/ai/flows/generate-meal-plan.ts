
// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI agent that generates a daily meal plan based on user's nutritional goals and available foods.
 *
 * - generateMealPlan - A function that handles the meal plan generation process.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import type { GenerateMealPlanInput, GenerateMealPlanOutput, Meal, MealItem } from '@/lib/types';

// Schemas mirroring the types in src/lib/types.ts for robust validation.
const FoodItemSchema = z.object({
  id: z.string(),
  name: z.string(),
  calories: z.number(),
  protein: z.number(),
  carbs: z.number(),
  fats: z.number(),
  servingSize: z.number(),
  servingUnit: z.string(),
});

const CustomMealSchema = z.object({
    id: z.string(),
    name: z.string(),
    calories: z.number().describe("Total calories for the meal's serving size."),
    protein: z.number().describe("Total protein for the meal's serving size."),
    carbs: z.number().describe("Total carbs for the meal's serving size."),
    fats: z.number().describe("Total fats for the meal's serving size."),
    servingSize: z.number(),
    servingUnit: z.string(),
});

const MealItemSchema = z.union([
  FoodItemSchema.extend({
    mealItemId: z.string(),
    quantity: z.number(),
    isCustom: z.boolean().describe('Set to false for individual food items.'),
  }),
  CustomMealSchema.extend({
    mealItemId: z.string(),
    quantity: z.number(),
    isCustom: z.boolean().describe('Set to true for pre-made custom meals.'),
  })
]);


const GenerateMealPlanInputSchema = z.object({
  calorieGoal: z.number().describe('Target daily calorie intake.'),
  proteinGoal: z.number().describe('Target daily protein intake in grams.'),
  carbsGoal: z.number().describe('Target daily carbohydrates intake in grams.'),
  fatsGoal: z.number().describe('Target daily fats intake in grams.'),
  availableFoods: z.array(FoodItemSchema).describe('A list of individual food items available to use.').optional(),
  availableMeals: z.array(CustomMealSchema).describe('A list of pre-defined custom meals available to use.').optional(),
});


const MealSchema = z.object({
    name: z.enum(['Breakfast', 'Lunch', 'Dinner', 'Snacks', 'Merienda']),
    items: z.array(MealItemSchema),
});

const GenerateMealPlanOutputSchema = z.array(MealSchema);


export async function generateMealPlan(input: GenerateMealPlanInput): Promise<GenerateMealPlanOutput> {
  // Map total... fields to the fields the AI prompt expects
   const mappedInput = {
        ...input,
        availableMeals: input.availableMeals?.map(m => ({
            id: m.id,
            name: m.name,
            calories: m.calories,
            protein: m.protein,
            carbs: m.carbs,
            fats: m.fats,
            servingSize: m.servingSize,
            servingUnit: m.servingUnit,
        })) || []
    };
  return generateMealPlanFlow(mappedInput);
}

const prompt = ai.definePrompt({
  name: 'generateMealPlanPrompt',
  input: { schema: GenerateMealPlanInputSchema },
  output: { schema: GenerateMealPlanOutputSchema },
  prompt: `You are an expert nutritionist and meal planner. Your task is to create a template for a daily meal plan based on the user's nutritional goals, using only the food items and pre-made meals they have available. The output should be in Spanish.

The user's goals are:
- Calories: {{{calorieGoal}}} kcal
- Protein: {{{proteinGoal}}} g
- Carbohydrates: {{{carbsGoal}}} g
- Fats: {{{fatsGoal}}} g

Here are the resources you can use. You must only use the resources provided in the sections below.
{{#if availableFoods}}
Available individual ingredients:
{{#each availableFoods}}
- (ID: {{this.id}}) {{this.name}} ({{this.calories}} kcal, {{this.protein}}g P, {{this.carbs}}g C, {{this.fats}}g F per {{this.servingSize}} {{this.servingUnit}})
{{/each}}
{{/if}}

{{#if availableMeals}}
Available pre-made meals:
{{#each availableMeals}}
- (ID: {{this.id}}) {{this.name}} (Total: {{this.calories}} kcal, {{this.protein}}g P, {{this.carbs}}g C, {{this.fats}}g F per {{this.servingSize}} {{this.servingUnit}})
{{/each}}
{{/if}}

Instructions:
1.  Create a full-day meal plan distributed across "Breakfast" ("Desayuno"), "Lunch" ("Almuerzo"), "Merienda", "Dinner" ("Cena"), and "Snacks".
2.  Distribute the total calories in a balanced way. A good distribution would be: Breakfast (25%), Lunch (30%), Merienda (10%), Dinner (25%), and Snacks (10%). Do not put the majority of calories in the "Snacks" category.
3.  For each item you select, you MUST use the original 'id' from the available resources.
4.  For each individual food item you select, you MUST set 'isCustom' to false. For pre-made meals, set 'isCustom' to true.
5.  Set a reasonable initial 'quantity' for each item. For pre-made meals, this is typically 1. For ingredients, it should be a sensible amount like its 'servingSize'.
6.  When you select an item, you MUST populate all of its nutritional fields ('calories', 'protein', 'carbs', 'fats', 'servingSize', 'servingUnit') in the output using the corresponding values from the input data.
7.  You MUST return an array of five meal objects, one for each meal type: 'Breakfast', 'Lunch', 'Merienda', 'Dinner', 'Snacks'. If a meal has no items, return an empty 'items' array for it.
8.  For each item in a meal, you must provide a unique 'mealItemId'.
9.  Do not invent new foods. Only use the ones provided.

Return the final meal plan template in the specified JSON format. The quantities will be adjusted programmatically later.
`,
});

const generateMealPlanFlow = ai.defineFlow(
  {
    name: 'generateMealPlanFlow',
    inputSchema: GenerateMealPlanInputSchema,
    outputSchema: GenerateMealPlanOutputSchema,
  },
  async (input) => {
    const { output: planTemplate } = await prompt(input);

    if (!planTemplate) {
        throw new Error('AI failed to generate a meal plan template.');
    }

    // Calculate total calories from the AI's generated template
    let totalCalories = 0;
    for (const meal of planTemplate) {
        for (const item of meal.items) {
            const quantity = Number(item.quantity) || 0;
            const servingSize = Number(item.servingSize) || 1;
            const itemCalories = Number(item.calories) || 0;
            const ratio = servingSize > 0 ? quantity / servingSize : 0;
            totalCalories += itemCalories * ratio;
        }
    }
    
    // If the plan is empty or has no calories, return it as is to avoid division by zero
    if (totalCalories <= 0) {
      return planTemplate; 
    }
    
    // Calculate scaling factor to match the user's calorie goal
    const scalingFactor = input.calorieGoal / totalCalories;

    // Adjust the quantities in the plan based on the scaling factor
    const adjustedPlan: Meal[] = [];

    for (const meal of planTemplate) {
        const adjustedMeal: Meal = { ...meal, items: [] };
        for (const item of meal.items) {
            const adjustedQuantity = (Number(item.quantity) || 0) * scalingFactor;
            
            const finalQuantity = item.isCustom ? 
              Math.max(0.25, Math.round(adjustedQuantity * 4) / 4) // Round to nearest 0.25 for servings
              : Math.max(1, Math.round(adjustedQuantity)); // Round to whole number for ingredients

            adjustedMeal.items.push({
                ...item,
                quantity: finalQuantity,
            } as MealItem);
        }
        adjustedPlan.push(adjustedMeal);
    }
    return adjustedPlan;
  }
);
