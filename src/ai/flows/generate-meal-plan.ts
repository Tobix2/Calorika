
// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI agent that generates a daily meal plan based on user's nutritional goals and available foods.
 *
 * - generateMealPlan - A function that handles the meal plan generation process.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import type { GenerateMealPlanInput, GenerateMealPlanOutput, MealItem, FoodItem, CustomMeal, Meal } from '@/lib/types';

// Schemas mirroring the types in src/lib/types.ts
const FoodItemSchema = z.object({
  id: z.string(),
  name: z.string(),
  calories: z.number(),
  protein: z.number(),
  carbs: z.number(),
  fats: z.number(),
  servingSize: z.number(),
  servingUnit: z.string(),
});

const MealItemSchema = FoodItemSchema.extend({
  mealItemId: z.string(),
  quantity: z.number(),
  isCustom: z.boolean().optional(),
});

const CustomMealSchema = z.object({
  id: z.string(),
  name: z.string(),
  items: z.array(MealItemSchema),
  totalCalories: z.number(),
  totalProtein: z.number(),
  totalCarbs: z.number(),
  totalFats: z.number(),
  servingSize: z.number().optional(),
  servingUnit: z.string().optional(),
});

const GenerateMealPlanInputSchema = z.object({
  calorieGoal: z.number().describe('Target daily calorie intake.'),
  proteinGoal: z.number().describe('Target daily protein intake in grams.'),
  carbsGoal: z.number().describe('Target daily carbohydrates intake in grams.'),
  fatsGoal: z.number().describe('Target daily fats intake in grams.'),
  availableFoods: z.array(FoodItemSchema).describe('A list of individual food items available to use.'),
  availableMeals: z.array(CustomMealSchema).describe('A list of pre-defined custom meals available to use.'),
});


const MealSchema = z.object({
    name: z.enum(['Breakfast', 'Lunch', 'Dinner', 'Snacks']),
    items: z.array(MealItemSchema),
});

const GenerateMealPlanOutputSchema = z.array(MealSchema);


export async function generateMealPlan(input: GenerateMealPlanInput): Promise<GenerateMealPlanOutput> {
  return generateMealPlanFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateMealPlanPrompt',
  input: { schema: GenerateMealPlanInputSchema },
  output: { schema: GenerateMealPlanOutputSchema },
  prompt: `You are an expert nutritionist and meal planner. Your task is to create a template for a daily meal plan based on the user's nutritional goals, using only the food items and pre-made meals they have available. Your main job is to select appropriate foods and distribute them across meals.

The user's goals are:
- Calories: {{{calorieGoal}}} kcal
- Protein: {{{proteinGoal}}} g
- Carbohydrates: {{{carbsGoal}}} g
- Fats: {{{fatsGoal}}} g

Here are the resources you can use:
Available individual ingredients:
{{#each availableFoods}}
- {{this.name}} ({{this.calories}} kcal, {{this.protein}}g P, {{this.carbs}}g C, {{this.fats}}g F per {{this.servingSize}} {{this.servingUnit}})
{{/each}}

Available pre-made meals:
{{#each availableMeals}}
- {{this.name}} (Total: {{this.totalCalories}} kcal, {{this.totalProtein}}g P, {{this.totalCarbs}}g C, {{this.totalFats}}g F)
{{/each}}

Instructions:
1.  Create a full-day meal plan distributed across "Breakfast", "Lunch", "Dinner", and "Snacks".
2.  Select a variety of items from the available foods and meals to create a balanced plan.
3.  For each individual food item you select, you MUST set the initial 'quantity' to be equal to its 'servingSize'. The final adjustment will be done later.
4.  You MUST return an array of four meal objects, one for each meal type: 'Breakfast', 'Lunch', 'Dinner', 'Snacks'. If a meal has no items, return an empty 'items' array for it.
5.  For each item in a meal, you must provide the complete food item data, plus a unique 'mealItemId' and the initial 'quantity'.
6.  Do not invent new foods. Only use the ones provided in the available foods and meals lists.

Return the final meal plan template in the specified JSON format. The quantities will be adjusted programmatically later.
`,
});

const generateMealPlanFlow = ai.defineFlow(
  {
    name: 'generateMealPlanFlow',
    inputSchema: GenerateMealPlanInputSchema,
    outputSchema: GenerateMealPlanOutputSchema,
  },
  async (input) => {
    const { output: planTemplate } = await prompt(input);

    if (!planTemplate) {
        throw new Error('AI failed to generate a meal plan template.');
    }

    let totalCalories = 0;
    for (const meal of planTemplate) {
        for (const item of meal.items) {
            const ratio = item.quantity / item.servingSize;
            totalCalories += item.calories * ratio;
        }
    }

    if (totalCalories === 0) {
        return planTemplate; // Avoid division by zero if no items were returned
    }
    
    // Calculate the scaling factor. If total calories are over the goal, this will be < 1.
    const scalingFactor = input.calorieGoal / totalCalories;

    const adjustedPlan: Meal[] = [];

    // If the plan is already under or at the goal, we can still apply a slight adjustment or just return as is.
    // We will scale down if over, but not scale up if under, to respect the "do not exceed" rule.
    if (scalingFactor < 1) {
        for (const meal of planTemplate) {
            const adjustedMeal: Meal = { ...meal, items: [] };
            for (const item of meal.items) {
                // Adjust quantity based on the scaling factor to meet the calorie goal.
                const adjustedQuantity = item.quantity * scalingFactor;
                adjustedMeal.items.push({
                    ...item,
                    quantity: Math.round(adjustedQuantity > 0 ? adjustedQuantity : 1), // Ensure quantity is at least 1
                });
            }
            adjustedPlan.push(adjustedMeal);
        }
        return adjustedPlan;
    }

    // If the initial plan is already under the goal, return it as is.
    return planTemplate;
  }
);
