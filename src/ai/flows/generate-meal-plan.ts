// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI agent that generates a daily meal plan based on user's nutritional goals and available foods.
 *
 * - generateMealPlan - A function that handles the meal plan generation process.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import type { GenerateMealPlanInput, GenerateMealPlanOutput } from '@/lib/types';

// Schemas mirroring the types in src/lib/types.ts
const FoodItemSchema = z.object({
  id: z.string(),
  name: z.string(),
  calories: z.number(),
  protein: z.number(),
  carbs: z.number(),
  fats: z.number(),
  servingSize: z.number(),
  servingUnit: z.string(),
});

const MealItemSchema = FoodItemSchema.extend({
  mealItemId: z.string(),
  quantity: z.number(),
});

const CustomMealSchema = z.object({
  id: z.string(),
  name: z.string(),
  items: z.array(MealItemSchema),
  totalCalories: z.number(),
  totalProtein: z.number(),
  totalCarbs: z.number(),
  totalFats: z.number(),
});

const GenerateMealPlanInputSchema = z.object({
  calorieGoal: z.number().describe('Target daily calorie intake.'),
  proteinGoal: z.number().describe('Target daily protein intake in grams.'),
  carbsGoal: z.number().describe('Target daily carbohydrates intake in grams.'),
  fatsGoal: z.number().describe('Target daily fats intake in grams.'),
  availableFoods: z.array(FoodItemSchema).describe('A list of individual food items available to use.'),
  availableMeals: z.array(CustomMealSchema).describe('A list of pre-defined custom meals available to use.'),
});


const MealSchema = z.object({
    name: z.enum(['Breakfast', 'Lunch', 'Dinner', 'Snacks']),
    items: z.array(MealItemSchema),
});

const GenerateMealPlanOutputSchema = z.array(MealSchema);


export async function generateMealPlan(input: GenerateMealPlanInput): Promise<GenerateMealPlanOutput> {
  return generateMealPlanFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateMealPlanPrompt',
  input: { schema: GenerateMealPlanInputSchema },
  output: { schema: GenerateMealPlanOutputSchema },
  prompt: `You are an expert nutritionist and meal planner. Your task is to create a daily meal plan for a user based on their nutritional goals and the food items and pre-made meals they have available.

Your primary instruction is to stay as close as possible to the user's nutritional targets. The total calories for the entire day MUST NOT exceed the calorie goal. It is much better to be slightly under the goal than to be over.

The user's goals are:
- Calories: {{{calorieGoal}}} kcal
- Protein: {{{proteinGoal}}} g
- Carbohydrates: {{{carbsGoal}}} g
- Fats: {{{fatsGoal}}} g

Here are the resources you can use:
Available individual ingredients:
{{#each availableFoods}}
- {{this.name}} ({{this.calories}} kcal, {{this.protein}}g P, {{this.carbs}}g C, {{this.fats}}g F per {{this.servingSize}} {{this.servingUnit}})
{{/each}}

Available pre-made meals:
{{#each availableMeals}}
- {{this.name}} (Total: {{this.totalCalories}} kcal, {{this.totalProtein}}g P, {{this.totalCarbs}}g C, {{this.totalFats}}g F)
{{/each}}

Instructions:
1.  Create a full-day meal plan distributed across "Breakfast", "Lunch", "Dinner", and "Snacks".
2.  You MUST adjust the 'quantity' of individual ingredients to meet the nutritional targets precisely. Do not just use the default serving size. For example, if you need fewer calories, use a smaller quantity of an ingredient. Calculate the correct quantity.
3.  You can use any combination of the available meals and individual ingredients.
4.  Get as close as possible to the user's target for calories, protein, carbs, and fats without going over. The total calories MUST NOT exceed the calorie goal.
5.  You MUST return an array of four meal objects, one for each meal type: 'Breakfast', 'Lunch', 'Dinner', 'Snacks'. If a meal has no items, return an empty 'items' array for it.
6.  For each item in a meal, you must provide the complete food item data, plus a unique 'mealItemId' and the calculated 'quantity' you decided on.
7.  Do not invent new foods. Only use the ones provided in the available foods and meals lists.

Return the final meal plan in the specified JSON format.
`,
});

const generateMealPlanFlow = ai.defineFlow(
  {
    name: 'generateMealPlanFlow',
    inputSchema: GenerateMealPlanInputSchema,
    outputSchema: GenerateMealPlanOutputSchema,
  },
  async (input) => {
    const { output } = await prompt(input);
    return output!;
  }
);
