
// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview An AI agent that generates a daily meal plan based on user's nutritional goals and available foods.
 *
 * - generateMealPlan - A function that handles the meal plan generation process.
 */

import { ai } from '@/ai/genkit';
import { z } from 'genkit';
import type { GenerateMealPlanInput, GenerateMealPlanOutput, Meal, MealItem } from '@/lib/types';

// Schemas mirroring the types in src/lib/types.ts for robust validation.
const FoodItemSchema = z.object({
  id: z.string(),
  name: z.string(),
  calories: z.number(),
  protein: z.number(),
  carbs: z.number(),
  fats: z.number(),
  servingSize: z.number(),
  servingUnit: z.string(),
});

const CustomMealSchema = z.object({
    id: z.string(),
    name: z.string(),
    // The items within a custom meal are not needed for the prompt, and cause a schema error.
    // We only care about the total nutritional values of the pre-made meal.
    totalCalories: z.number(),
    totalProtein: z.number(),
    totalCarbs: z.number(),
    totalFats: z.number(),
    servingSize: z.number(),
    servingUnit: z.string(),
});

const MealItemSchema = z.union([
  FoodItemSchema.extend({
    mealItemId: z.string(),
    quantity: z.number(),
    isCustom: z.boolean().describe('Set to false for individual food items.'),
  }),
  CustomMealSchema.extend({
    mealItemId: z.string(),
    quantity: z.number(),
    isCustom: z.boolean().describe('Set to true for pre-made custom meals.'),
    // Map totalCalories to calories for consistency in the output item
    calories: z.number(),
    protein: z.number(),
    carbs: z.number(),
    fats: z.number(),
  })
]);


const GenerateMealPlanInputSchema = z.object({
  calorieGoal: z.number().describe('Target daily calorie intake.'),
  proteinGoal: z.number().describe('Target daily protein intake in grams.'),
  carbsGoal: z.number().describe('Target daily carbohydrates intake in grams.'),
  fatsGoal: z.number().describe('Target daily fats intake in grams.'),
  availableFoods: z.array(FoodItemSchema).describe('A list of individual food items available to use.').optional(),
  availableMeals: z.array(CustomMealSchema).describe('A list of pre-defined custom meals available to use.').optional(),
});


const MealSchema = z.object({
    name: z.enum(['Breakfast', 'Lunch', 'Dinner', 'Snacks']),
    items: z.array(MealItemSchema),
});

const GenerateMealPlanOutputSchema = z.array(MealSchema);


export async function generateMealPlan(input: GenerateMealPlanInput): Promise<GenerateMealPlanOutput> {
  return generateMealPlanFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateMealPlanPrompt',
  input: { schema: GenerateMealPlanInputSchema },
  output: { schema: GenerateMealPlanOutputSchema },
  prompt: `You are an expert nutritionist and meal planner. Your task is to create a template for a daily meal plan based on the user's nutritional goals, using only the food items and pre-made meals they have available. Your main job is to select appropriate foods and distribute them across meals.

The user's goals are:
- Calories: {{{calorieGoal}}} kcal
- Protein: {{{proteinGoal}}} g
- Carbohydrates: {{{carbsGoal}}} g
- Fats: {{{fatsGoal}}} g

Here are the resources you can use. You must only use the resources provided in the sections below.
{{#if availableFoods}}
Available individual ingredients:
{{#each availableFoods}}
- {{this.name}} ({{this.calories}} kcal, {{this.protein}}g P, {{this.carbs}}g C, {{this.fats}}g F per {{this.servingSize}} {{this.servingUnit}})
{{/each}}
{{/if}}

{{#if availableMeals}}
Available pre-made meals:
{{#each availableMeals}}
- {{this.name}} (Total: {{this.totalCalories}} kcal, {{this.totalProtein}}g P, {{this.totalCarbs}}g C, {{this.totalFats}}g F per {{this.servingSize}} {{this.servingUnit}})
{{/each}}
{{/if}}

Instructions:
1.  Create a full-day meal plan distributed across "Breakfast", "Lunch", "Dinner", and "Snacks".
2.  Select a variety of items from the available resources to create a balanced plan.
3.  For each individual food item you select, you MUST set the 'quantity' to be equal to its 'servingSize' and 'isCustom' to false.
4.  For each pre-made meal you select, you MUST set the 'quantity' to 1 and 'isCustom' to true.
5.  When you select a pre-made meal from 'availableMeals', you MUST populate the 'calories', 'protein', 'carbs', and 'fats' fields in the output item using the corresponding 'totalCalories', 'totalProtein', 'totalCarbs', and 'totalFats' values from the input meal.
6.  You MUST return an array of four meal objects, one for each meal type: 'Breakfast', 'Lunch', 'Dinner', 'Snacks'. If a meal has no items, return an empty 'items' array for it.
7.  For each item in a meal, you must provide the complete food item data, plus a unique 'mealItemId', the initial 'quantity', and the 'isCustom' flag.
8.  Do not invent new foods. Only use the ones provided.

Return the final meal plan template in the specified JSON format. The quantities will be adjusted programmatically later.
`,
});

const generateMealPlanFlow = ai.defineFlow(
  {
    name: 'generateMealPlanFlow',
    inputSchema: GenerateMealPlanInputSchema,
    outputSchema: GenerateMealPlanOutputSchema,
  },
  async (input) => {
    const { output: planTemplate } = await prompt(input);

    if (!planTemplate) {
        throw new Error('AI failed to generate a meal plan template.');
    }

    let totalCalories = 0;
    for (const meal of planTemplate) {
        for (const item of meal.items) {
            const quantity = Number(item.quantity) || 0;
            const servingSize = Number(item.servingSize) || 1;
            const itemCalories = item.calories || 0;
            const ratio = servingSize > 0 ? quantity / servingSize : 0;
            totalCalories += itemCalories * ratio;
        }
    }
    
    if (totalCalories <= 0) {
      return planTemplate; 
    }
    
    const scalingFactor = input.calorieGoal / totalCalories;

    const adjustedPlan: Meal[] = [];

    for (const meal of planTemplate) {
        const adjustedMeal: Meal = { ...meal, items: [] };
        for (const item of meal.items) {
            const adjustedQuantity = (Number(item.quantity) || 0) * scalingFactor;
            const finalQuantity = Math.max(1, Math.round(adjustedQuantity));

            adjustedMeal.items.push({
                ...item,
                quantity: finalQuantity,
            } as MealItem);
        }
        adjustedPlan.push(adjustedMeal);
    }
    return adjustedPlan;
  }
);
